var BYPASS_OTA_CHECKS_FEATURE_NAME = "bypass_ota_checks";
var flaggedSenses = ["0035455F0EE10695", "00FBBA1CCDD857BC", "012AA344FC6CC58C", "016CE53719800C93", "016F37C863DFF4B5", "0184A1FFA81DD33C", "019BADC5BC91A9DC", "01CBAF0456942D3B", "022625E545DB712A", "026FA50921FF5D07", "02B5486D5BA05B00", "02EB2AFC6BA90FB0", "02ED5E02BB649A54", "03CF3F077ACF5109", "04BE0F709DFD3577", "04CFC455D8B7C153", "04D0967687DB542D", "04D17D01A6297407", "04D314470AB1EC4C", "051AF78C9C68C8B7", "055BE1A73CE9BB9E", "058A35832B373A8C", "06261F3EBB48FA1A", "067CDF2B71DBD2B1", "06F7FC23EDBC2902", "0711804A785EA709", "072331A3B38B1636", "072BCAD7AE613660", "074A6627ACEB02F5", "07538138513258F3", "075802F8F786B912", "0776D3F3E6C7DF61", "07FCC2B1BA67719B", "0807B1E843BCAAF7", "0866C32542C10155", "08BE7480F24E28E3", "08F16939B8D5B227", "08F572C47366B96D", "09278938E1247E1E", "0980A246F99DB764", "09EA5FA90F9FE48E", "09ED00962CBE3EAE", "0A18D4092B711B9D", "0A283CC93BC18F78", "0A7E948775D7B30E", "0A9478F53642DCFC", "0AAC5ABF046E2EBC", "0ABCEF99E0877CA0", "0B1C426EE75B1378", "0B29962F2C8C749B", "0BD2C1397089FFC4", "0BFDBB0FC6186037", "0C329BEB0466EB2F", "0C49FEE2AEEA3782", "0C6A96897A82371F", "0C99B3A1DE8902C4", "0CB039B6A7193334", "0CBA16BCB3E13CC1", "0CEA0CCA4FF98069", "0D07DBAF4F456C20", "0D58A6DEBD521131", "0D741D309B69C196", "0D903675120AA433", "0DD9476715D6D12C", "0DE6EA0CE542C354", "0DEBC24A9051EB98", "0DFD6A4E05A06771", "0E3A0C8DEF943BE5", "0E582D6306DBE42B", "0E58BA8A413658FE", "0E6FDFB55DA7F0C1", "0EAC615F096CA42F", "0EB0C52B3B619DB8", "0EB4D5E03C39979F", "0ED0D3B9E0490FD7", "0F121D3C4C80D860", "0F1F4DAEA1D17BD6", "0F413EB3F7238862", "0F512B97C26BB277", "0F6E42CABD6F7220", "0FCD9E9A2EA63A77", "0FE22984B5638B41", "10013FCDCEDBBFD0", "10088BDE63021957", "104201A66A8715A9", "10A911CE4D4E4193", "10BE99A45CF51BD1", "10C15FA20BBC5C93", "10C47E3688F39A0B", "10ECFF76593F4D49", "10FEEDE149C6D54E", "116063DEA0F0E5AD", "11A5B1BFA4006D09", "11CA0432BC6C674D", "11E9B16024382FA3", "124689C589158897", "1246A26C72192145", "12AE175D5276A161", "12DFF60900D69211", "12F18C2C902A811B", "1318E2138094ED7E", "133EE6E46D56D073", "13426175B4FCC94A", "13500F4498FC44A1", "13814505CAFEB419", "139270B9DDCF07B2", "13A7879831BE0ECA", "13E7290EA531CC28", "140BE2434AC7AEBF", "145FBD5819136747", "149E1680BA338B27", "14C965814F68C723", "15468E6B8A509BFB", "154814DD1A47A9FE", "1590134AE722F1E0", "159160EDF4DB52CD", "16693FCFDEF1FB30", "1669E13C79AF73B6", "16742067E52125AD", "16FE70B09674ABE1", "174B662407C91535", "17625CB39B9D70B2", "17770C2CFDA279E7", "17A30083D5171D6E", "17F925F5A4E0A0D0", "184B95BC2EB6E308", "18B2F42A450C4770", "1935BBF9C40E9BD8", "1984E45066DFF0E3", "1A3AB61F170320E4", "1A5517B402FCCEC2", "1A71F6EDB77477B6", "1AD04626D8F76637", "1AF66F5F006C6FAC", "1AFFCA6195145DCC", "1B12A7848A1454F0", "1B4F52B4C47D6AFC", "1B4FF7EB404D1C8D", "1B5A7758509DCD10", "1B9CED694FBAC4E2", "1BDE4A15D326A9F9", "1BE854F80398001A", "1BF52604702695D1", "1C30D35FAD34E975", "1C31FE4F1D658D02", "1C8223510E3837AF", "1D01F6D747560CF9", "1D073DD35BF7DBC1", "1D56BDCEE96F8D07", "1D5ACBD645D1F878", "1D67AA581036B34D", "1E23C1DFF94A365A", "1E3180E51F19C606", "1E3BC29F2B299B07", "1E5D00F9097ED65B", "1E9141AB89EC77D8", "1EB4A79C07FDA074", "1EDF680D52C33843", "1F104BA731A5D67F", "1F23A02142D9E875", "1F30062DC27CA489", "1F343EFA65168ED7", "1F5CB9C6A354A59B", "1F913375BD59F6D9", "2006962F14C18A27", "200DDDEE3701DD44", "2026AC8BB8D801F0", "20448C1739213DAE", "2047D17579F70699", "204F5F30621148A7", "2052ADE2E9430E77", "207ACA3FF038FD5B", "20940863A9165374", "20CDC4C27A713197", "20F363A32E0D6B63", "21008574339EF30C", "21142E8A7F069E88", "211BB1DBA120AED2", "2124D231459646AE", "224538FD06A8EA37", "226A3B3103A91F88", "22887A03D83C42D4", "229100038137C42E", "22E57A48492AAE43", "233C51D1BAD4E976", "234217629F508D4F", "237A1854E39115DD", "237EFF43BD29F166", "23D30BE049CEF0A0", "23EEF83BAFA07303", "24E68909C21A98B7", "24E89CDDFBF3DCFA", "252E3EC99B59C52C", "253C081D03661758", "253E47A2D960D9D7", "258D1D467C9401FE", "25A4A86F2A44BBE9", "25E249E021692EF9", "263A51D2B4078455", "26529A5081E3572F", "2655B925B56B9943", "2659FCACD8B2EACE", "274B25A975BDB40D", "283ED405A1288BAC", "2878ECB62B4BA50C", "288A4A6F7EC27AD1", "289D85DBAA7570D3", "28B4B6015065DE6F", "294D408EE2D8951C", "2980B136ACD74934", "2989500D39958CC7", "2A212B32F4CBCD21", "2A221F06D0531AD3", "2AA06E2365C57BCF", "2AE8245E7E7A1D11", "2B163E35A959F827", "2B2283DA926E9B57", "2B3828F4D2D89E9E", "2B439EBA9EA2495A", "2B7302A8952B8E77", "2BC87458133F6CA6", "2BF8C417392942B2", "2C2C9050FFCF3F73", "2C2D46F6F984D694", "2C6BFAC39DCCA6E3", "2D4B7ABC80AA8CAF", "2D4EC0F3A1C5B115", "2D93DAB7C9DB9DF1", "2D95615E414DC7F7", "2D98AEFF6624E948", "2DA33B9E2D88B8F7", "2E1E59B5EAEEC46B", "2E2CDC8706577BA8", "2E4514B8A3A6674A", "2EC4915741044870", "2F85A1C5FE5242BD", "2FA2BF80AE71AE74", "2FAF786FD03C7A14", "2FF0B8E617F74BDF", "3078D5E65F39249C", "30A159591F9ACFEB", "30D89CF763DF7B16", "3163AA99B82B73C3", "318B33DD17158A3D", "318FCC95147A582E", "31977422FB5C0947", "31F52E621033EDC1", "31F94988A75D6A93", "31FC7C7B5C3BF1BC", "3208F5256A5D695E", "320F0A127853D0B1", "322D627DC55171A6", "324A57469DEF8842", "327F177FE4F9E585", "328F815D9A1ADBA3", "329EE18F33535DA9", "32A8DDF835AC0A9F", "32BADA32371E668B", "32BE03F850C93227", "332786990B9A3772", "34039EF2497D1600", "342BA59244C244FD", "342E48FC0C804839", "343F3E0F1A1C11FF", "344724841EFB027C", "345169D9E9334992", "34D43F562C91F7E6", "34DFF42198D8737A", "34F5EB239B028D21", "34FECBD7968A5923", "35000DF220811569", "3508E4BF2949B496", "35DD4978C01A7A7F", "36492C645D2127E1", "36512B9B3DD8821E", "36857AB17C7A04EC", "37238ED512E52AAA", "373C4CD4FD28BA68", "37B6FC77792E17C3", "37EB91FEF4453511", "37FDF788D9487B74", "38087D5B7BDF0736", "381A7B225DCD32B4", "38265745AF50B360", "383A73E16A56B922", "391BAA265761B6EE", "39F056B323AC3CCA", "3A1A6EFE680CD91C", "3A3901E13D0211E8", "3AA8BEFF566DD1C2", "3AC125E20E413A1E", "3AE8D1EA702FD555", "3AF40A62ECFC2330", "3B09F7F7DF4D1594", "3B8349EF45B7889C", "3C4C801350652FEC", "3C860402050515CF", "3C8745F242447030", "3CB21C14D4326609", "3CD24989448F526B", "3CE3D6CC9A01516A", "3CF81FAAE16AF1A8", "3DA2BC0064D6B5CF", "3DC03207B27599DB", "3DC9C5657E01B111", "3E352F919BC7A499", "3EA776FF76F66C46", "3EFA378A7BF253DA", "3F535B3A23BCFF86", "3F61B15DDE4C3F01", "3FC34FFE87BB4FD7", "3FE2A6ADF4E857C5", "400536EE23A99809", "401B761B728BB5F9", "402AC0F49FA6678F", "40AA940D48180717", "40AAAE252446A20A", "40B94A48F6FFB5BA", "410D563C253E81E0", "4168183965C5948B", "41AAE14D5AD104A6", "41B1257962840EE9", "41C9EDB43E4C4224", "41D584F557C51B41", "41D978107C7D9486", "41F5F2E46D6ED647", "4272B0BAE2F64930", "428B586775F67A27", "42BBA58F4DB8975E", "42CA0C9F04DC37DB", "436F095245A53C6A", "43D70DDF92E12C79", "4434C190CE2C553D", "446C41E4EEC7BA32", "44A49B835FD1262F", "44D9061D642B9124", "44DABDF7FFED96D3", "4510034C4D062644", "454D44DD3DD9E827", "459B3BF4C8F1C74E", "45AD9B0F49DA26A8", "45B1A7C6FD0F8325", "45B2BB3324471C55", "45BED43482B5EB5D", "45C66A2FB3013956", "45C8BE10F113C606", "4648DF6ABF4C423E", "46E5F70CA3F3E7A6", "472DE3A0695FA740", "474A6D7794817648", "476D1909A1464DC3", "47C5CB28CA1CC237", "47DA25028F7AC09D", "47FDCAF57326FE9B", "481CC18F4CAA7089", "48A70EBE56A5BC1F", "48B003AD21488664", "48F706065F17999F", "495A060DF08C4ED2", "49709BE8EBC8029D", "497E6DE4A018C9B4", "4985C632EB6F7A2A", "49E459CB1596A673", "49EBF52D9B75A6E8", "49FAE240849EA76D", "4A0978994E0330AD", "4A1620907B9EA72C", "4A163B6D23C9E3B1", "4A259E2C153A47BA", "4A2E509B43242585", "4A671FF1BBEEB75E", "4A73F0184CFE9157", "4ACD4453EC1C81E5", "4AF505DEDFE0FA78", "4B457FFC139BD578", "4B4C255800B574DF", "4B9C63920633662F", "4BD1BE993126A2BF", "4BE149C0FA0A26C9", "4BF883BAECBAB25F", "4C1C1A20E5A00E17", "4C220298D380104A", "4C448FB8B7817260", "4C492AAE266DF14A", "4C9E667920A375F4", "4CAE34EB2B4236FA", "4CD7044BAE1F6EF6", "4CD73D69BB9C4DDE", "4CF4570DCB1437C7", "4CFCA489010140E1", "4D203690790879D9", "4DFF46840BE5F1E9", "4E230F6799D9E086", "4E31C9A8DABB21B6", "4E95E0549EC54FF0", "4E970ED92D8C56E4", "4F8C40EEFEE26D27", "4FCBEE3D5C69318E", "4FD39700A7060CE3", "4FE9A24DD0B868CD", "501C112E6D3ACC2B", "507DBEB7311D81C1", "5099101D91BC36B5", "50E0CA7C8703BD77", "51263B484253B46D", "512DF10EF3116E97", "513E290CB874355D", "5187D567ACA9FA46", "518ACAB6BD6ADBAC", "5197B61E62EB8C66", "51E76A0A3E179ED5", "52124E4BBDA4DA80", "529308E253B4C4FE", "52B28D9FC2C61035", "52E4DFD2AB727C60", "53219D331E8D42EA", "53C715FE5825D4CA", "53E3A21B7A93AD3C", "54363E185EAFF65B", "54564A77AA341946", "54992C8855A38A97", "54EBFEE1FAC14BE4", "54F3172EBC2988AE", "55646716C5067F25", "55D313F666F4B9F2", "561AAF536593A55D", "56608267A2E50967", "566D70121368F34C", "56ADCB05F72A7E28", "56BED9BF19080015", "56D1B42215B37B62", "56DD877A0679D679", "572C55A2677D6026", "57340E4559E82A12", "574557ED7994E648", "575A108E81D1F75E", "576EA3A0AB2D95BD", "579C719F7CA06B10", "57A20A138D64FF60", "57A55DD2B8255C8B", "57C1EFDE81F17AEA", "57E8B5D1E7689BB5", "583D714E5184560E", "5863D6055648A717", "58D28B9239961142", "58F03DF7AEEB01C2", "59188F216AF7DED2", "591D6F691251854D", "59369ECC67119125", "593EE56E7002B81D", "594310FB317B9A52", "595BF83FB1E6D5E7", "596FE58F35FB3190", "597605808858FA6D", "5985D62813B2D6BA", "598F87B9EE44A388", "59F62B9E45C060AE", "5A31B7F2BD47CEA2", "5A531986D7F0A1A7", "5A571C5057B240D4", "5A60207F1D86C874", "5A64A857818B0C8C", "5A68272F114200AC", "5A75899F16792AB0", "5A78BE50CCE61CBB", "5A8F244FF4BB099E", "5AB4B0151CC626CF", "5AC04C9E6A70E0E4", "5AE32F62213C052A", "5AECDB4AD7724A27", "5B42592BFBAC3FDA", "5B4FE045CCF3FDFF", "5B9E5D1F4B94B0C5", "5B9FA0A64A113541", "5BA4BA795FAAADB7", "5C546B5F3BE4FA8A", "5C79308628D4F389", "5C95029671227664", "5CA0611949FBBBC8", "5CB5D0BDCDD05FFE", "5CD3220B58C296C5", "5CDA88EFEF7712EB", "5D06B21EE298DCF2", "5D1C16B0B74310E8", "5D200B68F636E38C", "5D96C48DC6307E8C", "5DB03C1A52246269", "5E3A3BDF87BADB4A", "5E662E9F5B8EE5CF", "5E89F4A4C5282FF0", "5EE323A400B5A265", "5F10390D51B1421B", "5F1F83B9B511B018", "5F6B6F4C5042AE70", "5F8B1114B02FBCAE", "5FAAF1320C9B7E54", "5FD72FE683529239", "5FF78CFF382D3AEA", "6031801876E3B85C", "605323C083FC3801", "6078F11B1FF36D95", "607B96FD8142D610", "607D74C80EEC66BB", "607FEA5A0088D76F", "608DFB5A1722E3A3", "60ACF17A19C0CC1A", "60D0D805FA202806", "60D1320276D5AAC0", "60D18B78A83822DB", "60E255143C5D7861", "617D81FD579E2814", "61938DCBF551974F", "61B1C9E89B439A5E", "61FD5CB6EC49FA00", "6233662D9060B33C", "628C1F343C1F5614", "62D047D54D4134BD", "62DE6C43DDD2C526", "632456B01C18B9DF", "63457AD77A862B7A", "634A07399D247241", "639241526E170DD8", "63967FEF5AB23985", "639AB0ED1E96687A", "63ED14BD98C1D44A", "6414C91BA1F5339C", "64980E2182CF26C5", "64A035C10235AA0A", "64E03DE881D9B836", "6503711BD1B156A0", "651870FDBD5A1D09", "659B878CE9A14571", "65B1BE99C5E79600", "65E8D1923F8C2686", "662D73503C87BF49", "66B47808D5F42142", "66D6CFE306BFF237", "673C90ED9C8DEA48", "67B8A7AEE697F20F", "67D2BB8A16BB63D7", "67ECA6E425F4B72E", "6805E836CE639AA9", "6827B9F75CD3A5E0", "68339EF0F7A94F40", "6838B7B56B092DC4", "68CD23B8A7E3FA25", "68D50649371E4209", "6922F0E6885DCFC1", "6932985892F44768", "696C0D82BB731BB5", "698435BC0A102F8B", "699C5E9A52C26AC0", "69FD72191F306783", "6A2AD06653EE6251", "6A83375E1649172D", "6AFB71BC7C513F66", "6BCE549304CA994B", "6BF159D9E7DD213E", "6BF6993DCEEF0B91", "6C229D028CD10D1B", "6C67E04B596B8A84", "6CDA567436662A2D", "6CFEF5CA6B339C15", "6D34A781C0E1606B", "6D420D928F2D6A76", "6D932660B5F5E5CF", "6DB1BF9E50C9EA69", "6DD856E16D0EC295", "6E0842DCD2407A23", "6E3132F255E18BF2", "6E500DA55DBE3348", "6E63FC4833A4B22A", "6EA52C7EB983416D", "6ECBB6C2E1A55D90", "6F2B46EB38C12453", "6F8E0215492DDF80", "6FAA5DB98D28A958", "7000795D65B10F16", "708A91AE7831BF6A", "70A44F5AAF565227", "70AA613B605882FC", "70D2BAE1BBE6EDD2", "70EE3BE754D9D5DE", "7119000A9DBFCDC4", "713F21CD7CD0E59A", "721260252555FC1E", "7212DD526B2C0926", "722A4F22A95C6AB8", "72E6FA66FF69A169", "72FDC0C2190D2C3F", "730DE99A9D824CEC", "739FE203A7A7C540", "73CB8EDD587836C9", "745A72D661732565", "747166CB0FADFE6A", "74A1C1C42C209ED2", "755B7741AD2ACEE2", "758344E68293448C", "75A016C9B7F655B5", "75A442F9295E4C0C", "7606E1F97679CEAB", "763F625177C8212A", "76406C40B897B54A", "76489E1ED2A34C42", "76742622D6934342", "76945B07EA22DAF0", "7694F2ACCC32B2CD", "76A346C87564D012", "76D0116AEBF8F5C8", "76D199F819CC1EB0", "76E30B3B9E2BF2A0", "770942DF97CB5476", "7803DAB9F2F315D7", "781266B55EA8C699", "783CE2D4527A3754", "7861A5FA369F8A91", "788599B31F9E1A8E", "789C2E97421604FC", "78AA91F49E8290D2", "78CD798DB01FECEA", "790B906846E9DBFC", "79F7A3055A0296FD", "7A3BA74243869ACD", "7AAFCDAA61643BFE", "7AC7FC8FE7124282", "7AF08AAB6C5D2E6A", "7B0382F8DEA88A99", "7B3C20B7A6689548", "7B62101CFE09FF15", "7B69D48FE0839F84", "7BB4229B11FEF2C1", "7BF74432F2145C43", "7BF8FD1CB7F0577A", "7C452369341089A7", "7C52640F4C43D504", "7C6C3BB03F8D5A36", "7CE95E38CB525113", "7D07BD5E2B4CC625", "7D26B8AA77EB63D3", "7D3D492DC8E10774", "7D49921BA9E52718", "7D4F15D8CB82F8B5", "7DAB677C1A66D8B5", "7DAC04EDFDD96D69", "7DC50D12C7AFF5E4", "7DCCD63BBAC1FC91", "7E6BBAE711509A96", "7E7B941845B5CF4E", "7E9A0D3C320C4636", "7E9B82D22264D501", "7EE95CEC67DD17D2", "7F593229A76F3B37", "7FB0651382709E71", "7FC79D752D47C3A7", "7FF0C958191A1174", "801228A2FD3C9D1E", "8027F1DAC2FA1110", "808EB2BC1A085BC4", "80B1CF48DDF84545", "812E5B0349D9503A", "816861BB236DF5D7", "81ADE0AA0201981D", "81BFF43A765FA6B5", "82469415F0CFA68C", "8282F0A5AB73252A", "82E92358AEFC51BB", "82EA44B6398F11CD", "836D99D441E83E22", "836F5D59E9D6FDA0", "83812554B6B5474D", "8388EE2BEFBEA10E", "83B8B392B49873DD", "83E4EFA2668736E6", "83E52203E57C1E68", "83E59069F66C486D", "8451780ABC7B2D25", "84DFD0991094F9DB", "84FDB4A61548B90D", "850748298872049D", "850F5FDB42CD12F1", "853803305A8DFE94", "8580D64A9968D39C", "85C572E504BD5749", "85CFDA1AD07EE149", "8619B75A91EA0445", "8672F6834E18FCAD", "8676DB536499BBDB", "868943CF1C37B3FF", "870D2E0A9A460772", "87423AD2FFBF1E25", "876E8C6D9F942CD9", "87EFB62F84F0DA57", "882A31B9A8AC098F", "882DE9C9F76BAFEC", "88324B89D58C3118", "885E791395D49D04", "8891C6C1D3E42BC0", "889E6082BDF6A3E6", "88AE87CE0BAA62DD", "88AEE569601B973F", "88E0B5543F5AC34D", "8913B99CB1D76C9D", "8918490A7BB8B0C5", "89349009DCAA6776", "897F68805467A4C7", "89D18D1FA4B1B896", "89DB40D0CE0B096E", "8A703A4E87FEECA6", "8A84D6821974E3BA", "8B1AFCBD338DAFC5", "8B331E3B2E6D0812", "8B3AC8C9D6953A38", "8B87DCAFA9D4BF9D", "8B910D1C59BD7E6A", "8C1C0AF7A25FB1E4", "8C26663CA858DBE9", "8C8B126224C63075", "8C912D426764FEF7", "8C9DD87EBCF0D727", "8CAA2E3D12CB6451", "8CCE84DEF8A7A7A9", "8CD3443BDA6843D2", "8CF49650ADF16164", "8CF7C8964279C477", "8D01D1D05D1698ED", "8D160D8CB8AF67FF", "8D608AE9599B2741", "8D882EDB2DAA6FA1", "8E06C449D98CA059", "8E28DA9D8D834678", "8E2B436D2727B70E", "8E6199E7891A563D", "8E637352919878C0", "8E65143910292D51", "8ED6A009156E15F3", "8F4133F0F276FB53", "8F70D1BEAA0219E9", "8F7FAB8C3CCEC999", "8F9A1D7BCD5320BB", "8FAFE884F6D8FAFF", "8FC21FE3BE8357A7", "900093F4B20B8CE0", "9022F3B2AF51FB3B", "902CCF61F355F78E", "907120D844C0AD76", "9091A6D9E169AFF4", "912342467D253E42", "9146A0725453379D", "9154D8069C86684B", "916049A05C1556E0", "91734297EE2FC59F", "9217A92A0C680074", "9225FD7A680E7A21", "9229487DC01EF459", "926C7364DF786D88", "929677B5131861D2", "92A4CD78E98E9C5D", "92B8E044D7B1D13B", "92EFE8A635FC3C72", "931888A7C93E0631", "935A355CCF156112", "937DA55414CBE0C3", "93929EC513165FAE", "93C48B2533FD9117", "93C9669086595757", "93DCF1C2A8182BEE", "9407A475198014DC", "94722B7ABB6DB346", "94AA2C9F8B6592DC", "957944FBE570DBA8", "957977F3B2942033", "95D59E6EA0ABF52D", "95DA1D4936FF0104", "965DA67C076637BE", "967A455752543249", "96B2E1C6D00679B8", "970AFB8B8DDBCE4D", "974D9FB2A931595E", "976058CE345AED9C", "9789A9AC9E391D68", "979BFA4162C76117", "97A7DA34CC038CC7", "97C65B79259DAE82", "97D950C7A2398749", "97F199CD5F2A34EE", "98261185017E4691", "988C28B148BAE4FA", "9891507764DC6838", "989B91600ABF9B23", "98B1B9E6E188DA87", "98BD7191E9DC5F69", "98D7FB908A3B127D", "98EDCAEDACBF7544", "98F8FDF31143C227", "99269E63D7FB275E", "992E0BA27F371D3C", "99381F7A0C4528D4", "99844712AFBF6AC3", "9995B47BEB6B38AB", "9A670CEFCF9011E8", "9ABE8844D433421D", "9AF44F338DAD7174", "9B0B2B829F7AC5E7", "9B3F3F289C82FD58", "9B6100E5D91AD090", "9B6F550E1DA322DE", "9D0DA37806A2B2E9", "9D392DCCAB3BA465", "9D49F071DE4409D0", "9D5F0688F4A7710E", "9DAD3CC03FA8A5D5", "9DBFE0BEF9D46A32", "9E0D407E3B4EEAD2", "9E21182D02BA3FCC", "9E387AB2BDE3DBE9", "9E55ED52C565F6C2", "9EC305B35529C158", "9EC8456418B76720", "9ECFA5B29172A464", "9EE1359658A5EEB3", "9EEBFEB9FA695531", "9EF9DEFC833E815F", "9F59AF2F97627303", "9FD7931C4463106D", "A0C527B9C466207B", "A0EE628D508457AC", "A0FDE44016A3FA57", "A116DCF3A22E9860", "A19A55778995CB69", "A1E5B1E62CEDEA2A", "A25AB07328B012DF", "A2BD6355DC295D0F", "A2C972678FFAE110", "A2D57DAC216E3627", "A30FD32869D8C19A", "A335D67232DDED51", "A355BE69A634573F", "A37DEDBECBD74015", "A3F5960C5C75116F", "A4268C3DC781E26D", "A46D6390C92CD038", "A4A1631C274B787E", "A4AEF09279A58307", "A4B4C12F0AD83ED9", "A4C267FC3E94A473", "A5055198D708DA87", "A545C43F2C2C28F7", "A5BB5077DA7DD10F", "A6000F9ACA466772", "A65EE87F3696F6C0", "A6C20E84B3F714BB", "A6E3CB6904DDCCB6", "A742C2C7A0343CDA", "A745F5BEFC08A56D", "A757FC4BFC23047B", "A78105BE72C7689D", "A7AD02A769CC4BE5", "A7B044050DD8265F", "A7F84265653D0687", "A8026A8EA1599087", "A8146ABEB49A9567", "A8252F26B87E6706", "A825AE46B362F146", "A89DD3E68D5B6053", "A8AD4C6637C871B5", "A8D1931D1BD9EAB5", "A90D348924D20C70", "A95C78CC0E091D40", "A96734AF45DAFB52", "A97B2E607AC8885A", "A9B66D7DAC68B542", "AA4FED84FD18E923", "AA51A0B60B8B4286", "AA867A0067196092", "AA9FFA3584F27C53", "AAA38B91740242FA", "AAE76FED6F33F8BD", "AB03D6E066677FB4", "AB13062A0AC8039B", "AB30C1A6368E1C81", "AB35C4DE8E507C98", "AB7602FD72CC3147", "AB89388770500A48", "AB90CFDB6370837F", "AB9EDC38BD1A66EA", "ABAE4ECCB1EAC619", "ABEE3ED44A1A16E8", "ABF1BDC16236DCE5", "AC11C4292E5DE379", "AC17B1F07BF51AFB", "AC2A4A2887B74A06", "AC5713DA8BE7594D", "AC7224893493D189", "ACC0704B50BB55BA", "AD242E740D6C722D", "AD37769B6DAC115B", "AD6CB5A0C71F9B3C", "AD797322C2E1667C", "AD7D54884B9BE4F4", "ADE91E74314AB209", "AE036F81C183CF68", "AE5DE58A8736A8CC", "AE8103A9B8F0B3B7", "AED8307E93177359", "AF2156D6126536D5", "AF3981D1D843A6C6", "AFA36C233E22A5D2", "AFB941A1D78E84BD", "B00CC182164391C3", "B014D95B03FD225E", "B0164B262C1B9829", "B016D0092024B815", "B09370FE27E03025", "B0A54B44796F6F28", "B0D429C7BF853FB8", "B12CBF81BA1520DC", "B17AEEC218AEF660", "B1E8B1B721D54742", "B23FFEC21EEA7701", "B26BB690F430350D", "B27908D509232FB5", "B281AC9D2BC8EABD", "B28B6EAC908A2BB7", "B2CF42E12E5EB601", "B34CE75B2135AD66", "B3679EEA62E0F091", "B367A20B8848EDDC", "B37983C1A0130C25", "B38B8F2292BB487F", "B39DB714D7BD9DB5", "B3ECC505EAB017B0", "B4408A018F73C460", "B44D82A3FBD1CD89", "B46E4BCE4CCE3F8C", "B47875514DA61CF8", "B4A5C8DAC5C18B92", "B4E1964B4CA81EA4", "B528EDCD5EBE548E", "B5A3AB6AE66EAAB8", "B5C4E57EC50B36C7", "B5C82F305EB5EA61", "B5E4F71FCD4FBC3A", "B5FBF0E9AA264C6E", "B62DA9006E829BFD", "B6434C9203BFAE3D", "B6948C4F5FB02C89", "B69C4D803DE937DE", "B6B7115951CACD0E", "B6BC0A940AEED290", "B6CB9799D3B23800", "B6F173F28D401043", "B70CECA5FD034348", "B71FB49A61104AB0", "B74C301349A70C6C", "B78DED2D6430F518", "B7A0626CB5A597C5", "B7A12AB97DE20C0E", "B7D485B92715976E", "B826935E3EE504CC", "B84F888789D29663", "B855C5D7FA53AAA7", "B86A17939193A575", "B8C85550A971B3FE", "B910C7ABE7D0E383", "B99E8B270F617170", "B9AA8B75AE89AB4E", "BAC7F5C22FBBA2C7", "BAEDA9CC404A8095", "BAF99122FEAA95B4", "BB08E2B28D0DA910", "BB217B3A127CAAED", "BB68FA24DDB26EFB", "BBA2AD318E3132CD", "BBD39A3708D93809", "BBFA09BF9C853132", "BCD07D071AC8A481", "BCDF8EC00D0AF907", "BD1AA3FD70BDF58D", "BD1F38FC7B15E1E1", "BD318A5A6B2FFBF2", "BD7640AB6191A0D3", "BDCBFE8FD530DE95", "BE29E3438ED34259", "BE620DCEAFCC27BC", "BEBF0F3BC43EE9FF", "BF23988D0070F78F", "BF3744A29C855146", "BF752D2063C60AA7", "BFDE7343490C0A11", "BFE9B93115BE3EB1", "C002F22ED340B0FD", "C015E38EC2C3919B", "C06AC04817D15D1E", "C12AAA33D3B0DE76", "C13E018162520545", "C15181B876C544E1", "C15E194DBDC8A523", "C1A31C5DA576FEDE", "C1B4E8F8CFB940B3", "C236607BBA61D11F", "C28BD105F6526236", "C2D153FB6A6482E0", "C2FBCCD62C57F69A", "C363B8E1E17DE19C", "C3739A3BD11EF6EE", "C39FD9FFE519AF9C", "C3ACC8F58F95CD11", "C3E690692E4AC8B2", "C42601F23BB0164A", "C45DF516DF4ED04A", "C4D35A3EFD8D8B48", "C4EB51B5BEE9A2A2", "C4F96398C89656FF", "C5025428A44062E9", "C549333F4D25E14F", "C56AE5D37A0730FD", "C58D7D37C9F24682", "C59FB1C29623C7BC", "C5AFCF963F7DEF81", "C5B34D5547DD0B96", "C5C9C624088D64D5", "C5D297F60B20670B", "C625A9D72E2B4D95", "C6693DBC962B73E1", "C67B3DF06E54762A", "C6A04848894FCC5F", "C6B269DB1CD9E84E", "C717D739ED0A1767", "C74876DD44B1374A", "C79C28BEA5197686", "C7D3F627D1FD2E63", "C7D48084DE44532B", "C7E0D03A4E2BC9CC", "C8033335E9DB1A6F", "C91CD7AC49F9D0AB", "C9DDD15669515C13", "C9FA5E423B5E0093", "C9FC83B50F5AD5DE", "C9FFCBD68ADE1904", "CA51612DBF1924A1", "CA63C1E7C86A07E9", "CAA6F5869D559A88", "CABEF03F189BABD1", "CB2110C2846385FA", "CB293861012CE22E", "CB5EE22723C10874", "CB8D5D543654F588", "CB9906DEC13F5A96", "CBAC2CE11DB4EAC0", "CBE747E867DE1139", "CBEE010A868BA173", "CC01D32A9DAE283F", "CC156912F02B0CD8", "CC1CEB51766748DF", "CC41BBFE3D752FAA", "CC5CDFC936E0D193", "CD5509D8C47EBEA2", "CD6A7CB06554A984", "CD9A13DE11110CB7", "CD9DE2F2B659C350", "CDB2C4EEE8DB5CCF", "CE0D1BC591FA4501", "CE549A11ED45E363", "CE6CF9BBCABDE01A", "CE78DED77C3B1A16", "CE8A86B9EE83E8B9", "CE99B4F69D296846", "CEBAD94DFB8DCB13", "CEBEFF051E90E9F4", "CED1E8C51CE21C98", "CF1FE5D89A3A03CD", "CF4C9C1E1FA1C49B", "CFF59A36ED36ED81", "D006D5F8DC90BB7B", "D01B1B2E345E49E8", "D02ECC19A219BC59", "D065280E8157257F", "D06FD92A438852E9", "D07487F3E76D4252", "D127DD5DA7EF9348", "D18F44970B197FAD", "D1AA2C90A118C749", "D347700CFDDFAC37", "D377EA8899EE06E4", "D3A97348BF3194EE", "D3AC9D50D050979B", "D3EAAF914AE052EB", "D407234282D9729D", "D40DCAA4F003B3AC", "D4392A23FFB715AD", "D46E6F1EA8675E02", "D4906110D7963D5C", "D4D32F149723025B", "D5362E57AE6A2421", "D543530F15825FC4", "D5539C42E7D5EE90", "D5B6AB4EB4B0CF79", "D659DB162B2FCDFA", "D69335211D332B56", "D6DCEDCBE27EC4EA", "D723E2B5403968A9", "D7FC82A0B3321D5E", "D85E13C6EDCAB3CD", "D8945CBB99538488", "D8EDDA36726C5E66", "D933AFB00DB6EF95", "D96E1D05B22CC7B5", "D971539AD3FFC935", "D9794D6758B5FB0C", "D9C075DEAE763889", "DA4E37CDE9826F6A", "DA61534B70A08C83", "DA7ED7E5C30079D3", "DA8F717648CDCF33", "DA99E197B951632B", "DABA98D790048EB8", "DB1F50003D437D18", "DB4A14F98B974CEB", "DB9F2DBC9CCD0C5B", "DBC1E46F4E44A03D", "DBCCFD2D1368BCC9", "DBF119435011E251", "DBF4475A58D9961D", "DBFAEDC77DDC0F70", "DC59453913311839", "DC6D5BCA4E8355FE", "DCAC27C023462512", "DCB81499F3B9F84A", "DD34CFE7F98D0F17", "DD69118CF6D840F1", "DD6B2C0E31E45BB6", "DD731FC4D747B4AE", "DE16E809C22D3A4D", "DE27D79D6B62A032", "DE4FB1E4A6DB1D3D", "DE5D3A2964D5E27A", "DE68BF9818EBE7F6", "DE8EE72E0B26C37B", "DF49DB44E82B3329", "DF7DE1D9AD84651B", "DF8168C57790BDE1", "DF944BCFB7713D92", "DF94EFA99313C68B", "DFE2947C694E7BA8", "DFEEA714F0AAE612", "E01AB09D92758D41", "E050E82A1B2B50BC", "E06185347C55F451", "E078BC3E45DAB8E7", "E08BDCC74FFD7124", "E0C70948F7DE40FC", "E0CDA7C35284016A", "E0F551063C8067C2", "E119BE3397BBAC6C", "E1336C6398ED2AE6", "E1348740A4D05E2A", "E143AD285A07E066", "E17898E511941CAE", "E17F471A0FCE6C20", "E1C94D30DE612735", "E24F5289DEA5BFEC", "E2DC68BCB6862E8C", "E31170CA34E2989C", "E32496C31C467668", "E33031B3E1ED5F95", "E349FD9058BB67B5", "E35C920012A00037", "E38D19090E0D6704", "E3AAC51D27746D37", "E41C1C9C48F821F9", "E455E1070817C433", "E45867429FF68A88", "E464B0CF79571C22", "E484BB5D7622478F", "E4B32FB3CFD7BA8C", "E4C66256152A0C4B", "E4DF91087EAF62AD", "E4FFE451899E139F", "E5056DE2D2405B21", "E50DA3A9E224DD51", "E523D6E86B3710D8", "E55363077A14FD35", "E553AF91C1DDB742", "E5586449B97C6F09", "E560B2D68ADCD658", "E5CFA096280BD863", "E5D1E5A2F8D63E72", "E5D4C05BF4CD2D2D", "E5DA2E84B3D81315", "E682CD18754F3B74", "E6917B07EE68F763", "E6B8B14B3001042C", "E6DB086481602258", "E6FAEFE8E544944F", "E7E63D70CE491981", "E80B76C140C9F4F5", "E8317E329B042B07", "E83FEFF20259C97E", "E88CBCA7CB8C419E", "E8983F901172091A", "E8D3165B6685B687", "E900235C47E762C3", "E94950598637813A", "E94E5041BFDDA67A", "E96DE2EF13B3F28A", "E9DFD7416F027726", "EA1CCC0AFC68B033", "EA3846C599B520F0", "EA48E328F017E447", "EB26834572DDF03C", "EB2F74C741891080", "EB421B39B40AA83B", "EB4CE55D8665AFC0", "EB69E6693676C05F", "EBDDDCE4CD2DCFB6", "EBEDB5F47BF8FB39", "EBFCEE638BEF3D3C", "EC01688DBAF81869", "EC3269A99161EE20", "EC3E658EF018E2E5", "EC7ADD7309FF91AC", "EC8169BC8DBD7BB5", "ED002E1339699699", "ED04F7AB9EDB3772", "ED74B3732FCA6422", "ED841D534C7AF425", "EDDD8EF3A1C273DD", "EE03EDC6650FCE65", "EE06313CDB59E78F", "EE1B9FD99C2A3AD8", "EE3AA82F0FC961C7", "EE86B1F461C07A52", "EE979EFF763D1028", "EEBD92443299B07C", "EEDACD4F69D26439", "EEE5D5E938C47983", "EF7F9CD9357A6335", "EF8CFD97AF10AEFB", "EFA38897D2F6462C", "EFB22254699B732D", "EFCE64FCA9EEB7A3", "EFD4017E0E2FC663", "EFE3D9FD5FAAF7AD", "EFE9CBD739935E1A", "F03848AE13595C3B", "F047E5664BE1B593", "F062A4C8B75ACECF", "F07C782E4226AC29", "F0C39215A66F14DF", "F0DAD48380323BDE", "F0EE4C01D6F25BAF", "F111149022DCF75C", "F123863B77AE8161", "F14A882AA6EA5540", "F16EDF2257CBB72F", "F1C128FABCD89B68", "F20C9FF08B74818A", "F246A4931B17F3B5", "F24FC2949C13194B", "F25316C20F9097B3", "F289833B75B06ECD", "F29101518474938A", "F29E9802AA9AAFB3", "F2AAB98179C20FE7", "F2AEA763F20712D9", "F32A3EC50A62E78E", "F39B3049D1A4BE87", "F3AD0878901CAEAA", "F3AE3F6655F57A7C", "F3B478ECC1776670", "F3C36F1EDFAFF166", "F3E161D96D57923F", "F450B6E77EF21726", "F4758BA043EF853A", "F49F1E440AD650B1", "F4A76CC80D79D0B9", "F4C8A35B3DF31142", "F4EEECC43F76747F", "F4F16E27DB2EE0B8", "F555003474384BF6", "F570703477A5ABC5", "F5804D15CB11BD62", "F584BC7C657B66DE", "F5A13ED6BC9495C4", "F5A2836C8079F375", "F5A8EA941BAD5FE4", "F5C1115112E4B4C6", "F5CBF1F99739EDC5", "F61A30F5CF5B87B3", "F67948BC703651D3", "F6F36AAE8093235F", "F6F6C7E9688E321D", "F756AC62038A390D", "F76051CC15EEC7A2", "F765BE0FCFD77996", "F7746C174EFBF4C0", "F7A37644D9C9CC1F", "F7E11674FB957CDE", "F7E36B9D3FC8DC14", "F8243EF8C9C67D17", "F82D49FC7D57EFDB", "F8448118F73A7047", "F88080EE802F8F25", "F88990B085DC603B", "F88D3DE0DEC4E145", "F8A70F992584D57E", "F9242B2724CDFCD6", "F9325BABB88B265E", "F9730552CD081C95", "F992F4EB0ECA7C2B", "F9D5FCB5EE16C4A9", "FA0CEDE3C99CFE25", "FA31E163B62E768F", "FA3B75EB5CE42DAF", "FA740DDE99425489", "FAAF40135E281512", "FC0EE2141421045C", "FC494AF25134ABC8", "FC971454902F0B55", "FCB5CCCC75FAE5D7", "FCBED6CDF72456B7", "FCDC2054AE884D87", "FD2217B2ADFF1E7A", "FD2840D2391D4C2A", "FD6561F027920C6D", "FD7D492D4F45E728", "FDE5ED7EAEEB4BF3", "FDF58BC99DFB8ECF", "FE27CA55C89F5FCA", "FE4E915FEE9614DE", "FEC1168D5A8C0AFB", "FEE39659235B31D6", "FF0842C85CBB95F9", "FF099EE176AD803C", "FF0BE71C12B7AD35", "FF20EB592721B640", "FF4FE5F0A36D1F37", "FF52CE9C9E4B75C5", "FF79086B9C98603A", "FFB8EB22A96B2058"];

var FirmwareModal = React.createClass({
    getInitialState: function() {
        return {fwHistory: []};
    },
    translateFirmwares: function(firmwareHexList) {
        var fwTranslation = {};
        $.ajax({
            url: '/api/firmware_unhash',
            dataType: 'json',
            data: firmwareHexList,
            type: "POST",
            async: false,
            success: function(response) {
                fwTranslation = response.data
            }.bind(this)
        });
        return fwTranslation;
    },
    getFirmwares: function() {
        $.ajax({
            url: '/api/firmware/history',
            dataType: 'json',
            data: {'device_id': this.props.senseId},
            type: 'GET',
            success: function(response) {
                if (response.error.isWhiteString()){
                    var fwTranslation = this.translateFirmwares(JSON.stringify(Object.keys(response.data).map(function(ts){return parseInt(response.data[ts], 10).toString(16);})));
                    this.setState({
                        fwHistory: Object.keys(response.data).sort().reverse().map(function(ts){
                            var firmwareInt = response.data[ts];
                            var firmwareHex = parseInt(response.data[ts], 10).toString(16);
                            return {
                                timestamp: d3.time.format("%d %b %Y %H:%M:%S")(new Date(Number(ts))),
                                firmwareInt: firmwareInt,
                                firmwareHex: firmwareHex,
                                firmwareMan: fwTranslation[firmwareHex] || <span className="not-ok">--</span>
                            }
                        }.bind(this))
                    })
                }
            }.bind(this)
        });
    },
    componentDidMount: function() {
        this.getFirmwares();
    },
    render: function() {
        return <Modal animation={true}>
            <div className='modal-body'>
                <div className="modal-title">Firmware History <Button className="btn-round btn-borderless btn-fade" onClick={this.props.onRequestHide}>X</Button></div>
                <div className="modal-subtitle">Order by upgrade timestamp, see full detail for sense {this.props.senseId} <a href={"/firmware/?device_id=" + this.props.senseId} target="_blank">here</a></div>
                <br/>
                <Table id="fw-history">
                    <tbody>
                        <tr className="modal-col-title">
                            <td>Last seen (Browser tz)</td>
                            <td>Version (Dec)</td>
                            <td>Version (Hex)</td>
                            <td>Version (Man)</td>
                        </tr>
                        {this.state.fwHistory.map(function(h){
                            return <tr>
                                <td>{h.timestamp}</td>
                                <td>{h.firmwareInt}</td>
                                <td>{h.firmwareHex}</td>
                                <td className="modal-fw-man">{h.firmwareMan}</td>
                            </tr>;
                        })}
                        <tr><td/><td/><td/><td/></tr>
                    </tbody>
                </Table>
            </div>
            <div className='modal-footer'>
                <Button className="btn-round btn-fade" onClick={this.props.onRequestHide}>X</Button>
            </div>
        </Modal>;
    }
});


var BypassOTAModal = React.createClass({
    putSenseIdToFeature: function(putData) {
        $.ajax({
            url: '/api/features',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify(putData),
            type: 'PUT',
            success: function(response) {
                if (!(response.status === 204 && response.error === "")) {
                    alert("Failed to update feature");
                }
            }.bind(this)
        });
    },
    updateFeatureBypassOTA: function() {
        $.ajax({
            url: "/api/features",
            dataType: 'json',
            type: 'GET',
            data: {feature: BYPASS_OTA_CHECKS_FEATURE_NAME},
            success: function(response) {
                if (response.error.isWhiteString()) {
                    if (response.data.ids && response.data.ids.indexOf(this.props.senseId) === -1) {
                        var putData = response.data;
                        putData.ids.push(this.props.senseId);
                        putData.ids = putData.ids.join();
                        putData.feature = putData.name;
                        this.putSenseIdToFeature(putData);
                    }
                }
            }.bind(this)
        });
        this.props.onRequestHide();
    },
    render: function() {
        return <Modal animation={true}>
            <div className='modal-body'>
                <div className="modal-title">Bypass OTA Checks <Button className="btn-round btn-borderless btn-fade" onClick={this.props.onRequestHide}>X</Button></div>
                <div className="modal-subtitle">Once submitted, {this.props.senseId} will be added to feature "bypass_ota_checks", see more <a href="/features/" target="_blank">here</a></div>
                <br/>
                <Button onClick={this.updateFeatureBypassOTA}>Submit</Button>
            </div>
            <div className='modal-footer'>
                <Button className="btn-round btn-fade" onClick={this.props.onRequestHide}>X</Button>
            </div>
        </Modal>;
    }
});


var DustOffsetUpdateModal = React.createClass({
    computeAndUpsertDustCalibration: function() {
        $.ajax({
            url: "/api/dust_offset",
            dataType: 'json',
            type: 'GET',
            data: {sense_internal_id: this.props.senseInternalId, account_id: this.props.accountId},
            success: function(response) {
                if (!response.error.isWhiteString()){
                    alert(response.error);
                }
                else {
                    var averageDustOffset = response.data.adc_offset;
                    this.upsertDustCalibration(averageDustOffset);
                    this.props.parent.getDustCalibration(this.props.senseId, this.props.accountId, this.props.senseInternalId);
                }
                this.props.onRequestHide();
            }.bind(this)
        })
    },
    upsertDustCalibration: function(averageDustOffset) {
        if (averageDustOffset <= 0) {
            return false;
        }
        $.ajax({
            url: "/api/dust_calibration",
            dataType: 'json',
            contentType: 'application/json',
            type: 'PUT',
            data: JSON.stringify({
                    sense_id: this.props.senseId,
                    test_at: new Date().getTime(),
                    dust_offset: averageDustOffset
                }),
            success: function(response) {
                if (!response.error.isWhiteString()){
                    alert(response.error);
                }
            }.bind(this)
        });
    },
    render: function() {
        return <Modal animation={true}>
            <div className='modal-body'>
                <div className="modal-title">Dust Calibration Update<Button className="btn-round btn-borderless btn-fade" onClick={this.props.onRequestHide}>X</Button></div>
                <div className="modal-subtitle">Once submitted, average dust concentration will be calculated for {this.props.senseId} over the last 10 days or less. If that calculation yields positive value, we will use it to compute calibration delta which trigger AQ rendering server-side.
                </div>
                <br/>
                <div className="modal-subtitle">Try NOT to do it twice within a short time.</div>
                <br/>
                <Button onClick={this.computeAndUpsertDustCalibration}>Submit</Button>
            </div>
            <div className='modal-footer'>
                <Button className="btn-round btn-fade" onClick={this.props.onRequestHide}>X</Button>
            </div>
        </Modal>;
    }
});

var SenseSummary = React.createClass({
    getInitialState: function() {
        return {dustOffset: null, unhashedFirmware: null, dustCalibration: null};
    },
    componentDidUpdate: function(nextProps, nextState) {
        var currentSenseId = this.props.senseResponse.data && this.props.senseResponse.data.length > 0  ? this.props.senseResponse.data[0].device_account_pair.external_device_id : null;
        var nextSenseId = nextProps.senseResponse.data && nextProps.senseResponse.data.length > 0  ? nextProps.senseResponse.data[0].device_account_pair.external_device_id : null;
        if (currentSenseId === nextSenseId) {
           return false;
        }

        var senseResponse = this.props.senseResponse;
        var firmwareVersion = senseResponse.data[0].device_status ? senseResponse.data[0].device_status.firmware_version : undefined;
        this.getUnhashedFirmware(firmwareVersion);

        var accountId = senseResponse.data[0].device_account_pair ? senseResponse.data[0].device_account_pair.account_id : undefined;
        var senseId = senseResponse.data[0].device_account_pair ? senseResponse.data[0].device_account_pair.external_device_id : undefined;
        var senseInternalId = senseResponse.data[0].device_account_pair ? senseResponse.data[0].device_account_pair.internal_device_id : undefined;
        this.getDustCalibration(senseId, accountId, senseInternalId);
    },

    getUnhashedFirmware: function(firmwareVersion) {
        $.ajax({
            url: "/api/firmware_unhash",
            dataType: 'json',
            type: 'GET',
            data: {version: firmwareVersion},
            success: function(response) {
                if (response.error.isWhiteString()) {
                    this.setState({unhashedFirmware: <div>
                        {firmwareVersion || <span className="not-ok">unknown</span>}
                        <span> {response.data.join(", ") ? "(" + response.data.join(", ") + ")" : null}</span>
                    </div>});
                }
                else {
                    this.setState({unhashedFirmware: <span className="not-ok">--</span>});
                }
            }.bind(this)
        });
    },

    getDustCalibration: function(senseId, accountId, senseInternalId) {
        $.ajax({
            url: "/api/dust_calibration",
            dataType: 'json',
            type: 'GET',
            data: {sense_id: senseId},
            success: function(response) {
                if (response.error.isWhiteString()){
                    this.setState({dustCalibration: <div>
                        <span>{response.data.dust_calibration_delta} </span>
                        <ModalTrigger modal={<DustOffsetUpdateModal parent={this} senseId={senseId} accountId={accountId} senseInternalId={senseInternalId} />}>
                            <Button bsSize="xsmall">Re-compute</Button>
                        </ModalTrigger>
                    </div>});
                }
                else {
                    this.setState({dustCalibration: <ModalTrigger modal={<DustOffsetUpdateModal senseId={senseId} accountId={accountId} senseInternalId={senseInternalId} />}>
                <Button bsSize="xsmall">Compute</Button>
            </ModalTrigger>});
                }
            }.bind(this)
        });
    },

    closePopoverManually: function() {
        $("#popover-trigger").trigger("click");
    },

    updateSenseColor: function(senseId, color) {
        this.closePopoverManually();
        $.ajax({
            url: "/api/sense_color",
            dataType: 'json',
            type: 'PUT',
            data: {sense_id: senseId, color: color},
            success: function(response) {
                if (response.error.isWhiteString()){
                    $("#popover-trigger").text(color);
                }
            }
        });
        return false;
    },

    render: function() {
        var senseResponse = this.props.senseResponse,
            senseKeyStoreResponse = this.props.senseKeyStoreResponse,
            timezoneResponse = this.props.timezoneResponse,
            senseColorResponse = this.props.senseColorResponse,
            result = null, lastSeen = null, keyStore = null;

        var timezone = <span>{timezoneResponse.error.isWhiteString() && !$.isEmptyObject(timezoneResponse) ?
            timezoneResponse.data.timezone_id : "-" }</span>;

        if (senseKeyStoreResponse.error.isWhiteString()) {
            if(!$.isEmptyObject(senseKeyStoreResponse) && senseKeyStoreResponse.data.key) {
                keyStore = senseKeyStoreResponse.data.key.slice(senseKeyStoreResponse.data.key.length-5, senseKeyStoreResponse.data.key.length) + " " + (senseKeyStoreResponse.data.created_at || "");
            }
        }
        else {
            keyStore = <span className="not-ok">unprovisioned</span>;
        }

        if (senseResponse.data.length > 0) {
            var accountId = senseResponse.data[0].device_account_pair ? senseResponse.data[0].device_account_pair.account_id : undefined;
            var senseId = senseResponse.data[0].device_account_pair ? senseResponse.data[0].device_account_pair.external_device_id : undefined;
            var senseIdSpan = senseId;
            if (flaggedSenses.indexOf(senseId) > -1) {
                senseIdSpan = <OverlayTrigger trigger="hover" placement="right" overlay={
                    <Popover title={<span>Flagged Sense</span>}>
                        belongs to 1.3K senses that were accidentally reset (wifi cred wiped out)
                    </Popover>}>
                    <span className="not-ok">{senseId}</span>
                </OverlayTrigger>
            }

            var senseInternalId = senseResponse.data[0].device_account_pair ? senseResponse.data[0].device_account_pair.internal_device_id : undefined;

            if (senseResponse.data[0].device_status){
                var lastSeenEpoch = senseResponse.data[0].device_status.last_seen;
                lastSeen = <span className={lastSeenEpoch < new Date().getTime() - 3600*1000 ? "not-ok" : "ok"}  dangerouslySetInnerHTML={{__html:utcFormatter(new Date(lastSeenEpoch))}}/>;
                var pairedByAdmin = senseResponse.data[0].paired_by_admin === true ? "&nbsp;&nbsp;by admin": "";
            }
            var lastPairing = <span dangerouslySetInnerHTML={{__html: senseResponse.data[0].pairing_ts ? utcFormatter(new Date(senseResponse.data[0].pairing_ts)) + pairedByAdmin : null}}/>;

            var senseColor = senseColorResponse.error.isWhiteString() && senseColorResponse.data ?
                <OverlayTrigger trigger="click" placement="right" overlay={
                    <Popover title={<span>Update Color &nbsp;<Button id="popover-close" onClick={this.closePopoverManually} bsSize="xsmall">x</Button></span>}>
                        <Button onClick={this.updateSenseColor.bind(this, senseId, "BLACK")} className="device-color" bsSize="xsmall">BLACK</Button>&nbsp;
                        <Button onClick={this.updateSenseColor.bind(this, senseId, "WHITE")} className="device-color" bsSize="xsmall">WHITE</Button>
                    </Popover>}>
                    <Button id="popover-trigger" className="device-color" bsSize="xsmall">{senseColorResponse.data}</Button>
                </OverlayTrigger> : null;

            result = <div>
                <Table>
                    <tbody>
                        <tr><td>ID</td><td><span>{senseIdSpan}</span><span>{" (" + senseInternalId + ")"}</span></td></tr>
                        <tr><td>Keystore</td><td>{keyStore}</td></tr>
                        <tr><td>Firmware</td><td>{this.state.unhashedFirmware}</td></tr>
                        <tr><td>Dust Calib.</td><td>{this.state.dustCalibration}</td></tr>
                        <tr><td>Timezone</td><td>{timezone}</td></tr>
                        <tr><td>Color</td><td>{senseColor}</td></tr>
                        <tr><td>Last Seen</td><td>{lastSeen}</td></tr>
                        <tr><td>Last Pairing</td><td>{lastPairing}</td></tr>
                        <tr><td/><td/></tr>
                    </tbody>
                </Table>
                <ul className="extra">
                    <li><a target="_blank" href={"/sense_logs_es/?text=&sense_id=" + senseId + "&top_fw=&middle_fw=&start=&end=&limit=&asc=false&crash_only=false"}>Logs</a></li>
                    <li><a target="_blank" href={"/sense_events/?account_input=" + senseId + "&start_ts=" + new Date().getTime()}>Events</a></li>
                    <li><ModalTrigger modal={<FirmwareModal senseId={senseId} />}>
                        <a className="cursor-hand">Firmware-History</a>
                    </ModalTrigger></li>
                    <li><ModalTrigger modal={<BypassOTAModal senseId={senseId} />}>
                        <a className="cursor-hand">Bypass-OTA</a>
                    </ModalTrigger></li>
                </ul>
            </div>;
        }

        return !senseResponse.error.isWhiteString ?
            <Well>{senseResponse.error}</Well>: result;
    }
});


var SenseLimitedSummary = React.createClass({
    updateSenseColor: function(senseId, color) {
        this.closePopoverManually();
        $.ajax({
            url: "/api/sense_color",
            dataType: 'json',
            type: 'PUT',
            data: {sense_id: senseId, color: color},
            success: function(response) {
                if (response.error.isWhiteString()){
                    $("#popover-trigger").text(color);
                }
            }
        });
        return false;
    },
    closePopoverManually: function() {
        $("#popover-trigger").trigger("click");
    },
    render: function() {
        var keyStore = null;
        var senseKeyStoreResponse = this.props.senseKeyStoreResponse;
        var senseColorResponse = this.props.senseColorResponse;

        if (senseKeyStoreResponse.error.isWhiteString()) {
            if(!$.isEmptyObject(senseKeyStoreResponse) && senseKeyStoreResponse.data.key) {
                keyStore = senseKeyStoreResponse.data.key.slice(senseKeyStoreResponse.data.key.length-5, senseKeyStoreResponse.data.key.length) + " " + (senseKeyStoreResponse.data.created_at || "");
            }
        }
        else {
            keyStore = <span className="not-ok">unprovisioned</span>;
        }

        var senseColor = senseColorResponse.error.isWhiteString() && senseColorResponse.data ?
                <OverlayTrigger trigger="click" placement="right" overlay={
                    <Popover title={<span>Update Color &nbsp;<Button id="popover-close" onClick={this.closePopoverManually} bsSize="xsmall">x</Button></span>}>
                        <Button onClick={this.updateSenseColor.bind(this, this.props.senseId, "BLACK")} className="device-color" bsSize="xsmall">BLACK</Button>&nbsp;
                        <Button onClick={this.updateSenseColor.bind(this, this.props.senseId, "WHITE")} className="device-color" bsSize="xsmall">WHITE</Button>
                    </Popover>}>
                    <Button id="popover-trigger" className="device-color" bsSize="xsmall">{senseColorResponse.data}</Button>
                </OverlayTrigger> : null;


        return <div>
            <Table>
                <tbody>
                    <tr><td>ID</td><td>{this.props.senseId}</td></tr>
                    <tr><td>Keystore</td><td>{keyStore}</td></tr>
                    <tr><td>Color</td><td>{senseColor}</td></tr>
                    <tr><td/><td/></tr>
                </tbody>
            </Table>
            <ul className="extra">
                <li><a target="_blank" href={"/sense_logs/?field=device_id&keyword=" + this.props.senseId + "&sense_id=&limit=&start=&end="}>Logs</a></li>
                <li><a target="_blank" href={"/sense_events/?account_input=" + this.props.senseId + "&start_ts=" + new Date().getTime()}>Events</a></li>
                <li><ModalTrigger modal={<FirmwareModal senseId={this.props.senseId} />}>
                    <a className="cursor-hand">Firmware-History</a>
                </ModalTrigger></li>
                <li><ModalTrigger modal={<BypassOTAModal senseId={this.props.senseId} />}>
                    <a className="cursor-hand">Bypass-OTA</a>
                </ModalTrigger></li>
            </ul>
        </div>;
    }
});
